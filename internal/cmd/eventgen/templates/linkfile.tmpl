// Copyright Axis Communications AB.
//
// For a full list of individual contributors, please see the commit history.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by eventgen. DO NOT EDIT.

package eiffelevents

{{$sliceType := printf "%ssV%d" .BaseStructName .MajorVersion}}

// {{$sliceType}} represents a slice of {{.StructName}} values with helper methods
// for adding new links.
type {{$sliceType}} []{{.StructName}}

var _ LinkFinder = &{{$sliceType}}{}

// Add adds a new link of the specified type to a target event.
func (links *{{$sliceType}}) Add(linkType string, target MetaTeller) {
	*links = append(*links, {{.StructName}}{Target: target.ID(), Type: linkType})
}

// AddByID adds a new link of the specified type to a target event identified by an ID.
func (links *{{$sliceType}}) AddByID(linkType string, target string) {
	*links = append(*links, {{.StructName}}{Target: target, Type: linkType})
}

// FindAll returns the IDs of all links of the specified type, or an empty
// slice if no such links are found.
func (links {{$sliceType}}) FindAll(linkType string) []string {
	result := make([]string, 0, len(links))
	for _, link := range links {
		if link.Type == linkType {
			result = append(result, link.Target)
		}
	}
	return result
}

// FindFirst returns the ID of the first encountered link of the specified
// type, or an empty string if no such link is found.
func (links {{$sliceType}}) FindFirst(linkType string) string {
	for _, link := range links {
		if link.Type == linkType {
			return link.Target
		}
	}
	return ""
}
