// {{.TypeName}} represents a slice of {{.SlicedType}} values with helper methods
// for adding new links.
type {{.TypeName}} []{{.SlicedType}}

var _ LinkFinder = &{{.TypeName}}{}

// Add adds a new link of the specified type to a target event.
func (links *{{.TypeName}}) Add(linkType string, target MetaTeller) {
	*links = append(*links, {{.SlicedType}}{Target: target.ID(), Type: linkType})
}

// Add adds a new link of the specified type to a target event identified by an ID.
func (links *{{.TypeName}}) AddByID(linkType string, target string) {
	*links = append(*links, {{.SlicedType}}{Target: target, Type: linkType})
}

// FindAll returns the IDs of all links of the specified type, or an empty
// slice if no such links are found.
func (links {{.TypeName}}) FindAll(linkType string) []string {
	result := make([]string, 0, len(links))
	for _, link := range links {
		if link.Type == linkType {
			result = append(result, link.Target)
		}
	}
	return result
}

// FindFirst returns the ID of the first encountered link of the specified
// type, or an empty string if no such link is found.
func (links {{.TypeName}}) FindFirst(linkType string) string {
	for _, link := range links {
		if link.Type == linkType {
			return link.Target
		}
	}
	return ""
}
